#ifndef ERROR_H_INCLUDED
#define ERROR_H_INCLUDED

#define ERROR_UNDEFINED_IDENTIFIER 0
#define ERROR_DUPLICATE_IDENTIFIER 1
#define ERROR_EXPECTED_IDENTIFIER 2
#define ERROR_EXPECTED_RIGHTBRACKET 3
#define ERROR_EXPECTED_COLON 4
#define ERROR_ILLEGAL_SYMBOL 5
#define ERROR_NOTYPE_PARAMETER 6
#define ERROR_EXPECTED_LEFTBRACKET 7
#define ERROR_EXPECTED_VARTYPE 8
#define ERROR_EXPECTED_LEFTSQUAREBRACKET 9
#define ERROR_EXPECTED_RIGHTSQUAREBRACKET 10
#define ERROR_EXPECTED_COMMA 11
#define ERROR_EXPECTED_SEMICOLON 12
#define ERROR_ILLEGAL_RETVALUETYPE 13
#define ERROR_EXPECTED_ASSIGN 14
#define ERROR_EXPECTED_EQUAL 15
#define ERROR_ILLEGAL_CONDITION 16
#define ERROR_EXPECTED_LEFTCURLYBRACKET 17
#define ERROR_EXPECTED_RIGHTCURLYBRACKET 18
#define ERROR_ILLEGAL_CASEVALUETYPE 19
#define ERROR_ILLEGAL_CHARACTER 20
#define ERROR_ILLEGAL_CONSTVALUE 21
#define ERROR_ILLEGAL_ARRAYSIZENOTZERO 22
#define ERROR_ILLEGAL_ARRAYOUTOFBOUND 23
#define ERROR_ILLEGAL_FACTORTYPE 24
#define ERROR_EXPECTED_SINGLEQUOTATION 25
#define ERROR_EXPECTED_DOUBLEQUOTATION 26
#define ERROR_ILLEGAL_NORETVALUE 27
#define ERROR_OVERFLOW_MEMORY 28
#define ERROR_EXPECTED_OPERATOR 29
#define ERROR_EXPECTED_RELAOPERATOR 30
#define ERROR_EXPECTED_STRING 31
#define ERROR_EXPECTED_MAIN 32
#define ERROR_EXPECTED_TYPE 33
#define ERROR_ILLEGAL_PREZERO 34
#define ERROR_EXPECTED_INTEGER 35
#define ERROR_ILLEGAL_INTEGER 36
#define ERROR_EXPECTED_FUNCTYPE 37
#define ERROR_ILLEGAL_RETURN 38
#define ERROR_ILLEGAL_STATEMENTHEAD 39
#define ERROR_ILLEGAL_FUNCCALL 40
#define ERROR_EXPECTED_ELSE 41
#define ERROR_ILLEGAL_ASSIGNMENTLEFT 42
#define ERROR_ILLEGAL_PRINTF 43
#define ERROR_INVALID_ARRAYTYPE 44
#define ERROR_ILLEGAL_SCANF 45
#define ERROR_UNMATCH_TYPE 46

#define ERRORMSGNUM 47
#define ERRORMSGSIZE 1000

void error(int index);
void error(int index, char str[]);
void skipNextLine();
void skipNextComma();

#endif // ERROR_H_INCLUDED
